[gui]
##title=Logistic Request Manager
save_as=另存為
empty=空的
import=進口
export=出口
import-title=匯入程式碼
export-title=匯出程式碼
import-preview-title=預覽匯入的預設
target_label=互動實體：
auto_trash=清除所有
keep_all=保留全部
protected_preset=protected - 不能被覆蓋

[tooltip]
# prevent linebreaks with printable whitespace (ALT+NUM 2-5-5' '), if necessary
button=後勤請求管理器\n（按住“__1__”可將 GUI 置於其預設位置）
save_as_textfield=輸入要用於新預設的名稱。
save_as=將來自 __1__ 的當前物流請求儲存為新預設。
blueprint-request=在此處放置一個藍圖以請求其在 __1__ 中的內容。
always_append_blueprints=在此處放置一個藍圖以將其內容新增到 __1__ 中的現有請求中。
save-preset=用來自 __2__ 的當前物流請求覆蓋預設的“__1__”。
load-preset=在 __2__ 中載入預設“__1__”作為請求。
delete-preset=刪除預設“__1__”。
import-preset=匯入以前的 exportet 預設。
export-preset=將預設“__1__”匯出為字串。
imported-string=匯入的字串
missing-object=__1__ &quot;__2__&quot; 似乎消失了。你錯過了一個模組嗎？
invalid-type=“__2__”的訊號型別“__1__”無效。
function-append=請求將被新增到現有請求中，而不是替換它們
function-undefined_max_as_infinit=新請求的最大值將設定為∞
function-round_up=請求的最小值將四捨五入到下一個完整的堆疊大小
function-subtract=__1__ 從現有請求中減去請求，而不是替換或新增它們。
function-subtract_max=請求的最大值將從現有請求的最大值中減去
on_modifier=如果在單擊時按下了 __1__
if_not_modifier=如果單擊時未按下 __1__
protected_preset=受保護的預設 - 不能被覆蓋。

[common]
The-item=專案
The-fluid=流體
The-virtual=訊號
CTRL=CTRL
SHIFT=轉移
ALT=一切
CTRL+SHIFT=CTRL + SHIFT
CTRL+ALT=CTRL + ALT
SHIFT+ALT=SHIFT + ALT
CTRL+SHIFT+ALT=CTRL + SHIFT + ALT
R-CLICK=右鍵點選

[messages]
name-needed=您必須輸入預設名稱。
not-enough-slots-to-request=沒有足夠的插槽來請求這個 __1__。
not-enough-slots-to-append=沒有足夠的插槽將此 __1__ 附加到當前請求。
select-preset=您必須選擇 __1__ 的預設。
protected-preset=受保護的預設。您必須為 __1__ 選擇另一個預設。
save=儲存
load=載入
delete=刪除
append=附加
export=出口
open-entity-does-not-support-requests=“__1__”不支援後勤請求。
no_request_entity_selected=您需要開啟支援物流請求的 __1__ 或您的庫存到 __2__ 和 __3__。
no_request_entity_or_combinator_selected=您需要開啟一個支援物流請求的 __1__、一個常量組合器或您的庫存到 __2__ 一個 __3__。
blueprint=藍圖
preset=預設
source-entity=源實體
target-entity=目標實體
Error=錯誤
error-invalid-string=匯入的字串無效。
error-object-removed=__1__ “__2__”，在預設 __3__ 中列出，似乎已經消失了。你錯過了一個模組嗎？
error-unsupported-type=預設 __3__ 中列出的“__2__”的訊號型別“__1__”無效。
error-library_blueprints=無法檢查儲存在庫中的藍圖。
library_blueprints=無法從儲存在庫中的藍圖中提取切片。您必須手動新增這些。
new_feature-export_import=添加了匯入/匯出功能。
new_feature-constant_combinator=添加了與常量組合器的互動。
new_feature-modifiers=添加了與實體互動的修飾符。
new-gui=GUI 收到了重大更改。
new-setting=這可以透過 mod-settings 選單進行配置。
new-settings=這些可以透過 mod-settings 選單進行配置。
new-how_to=請檢視 mod 門戶以獲取更新的操作方法。
auto_trash=所有未在下面列出的專案都將被要求最小為“0”，最大為“0”。
keep_all=所有未在下面列出的專案都將被請求最小為“0”，最大為“∞”。
large_preset_warning=儲存的預設相對較大。檢查設定以防止在選擇預設時凍結。

[command]
help=可用於在刪除預定義預設時恢復它們或強制執行 GUI。
usage=用法：
details=有關引數型別的詳細資訊
parameter=範圍
with_parameters=使用以下引數之一：
parameter_invalid=引數無效。
parameter_missing=缺少引數。
details-help=提供有關引數的詳細資訊。
details-renew_empty=重新建立預設的“emty”。
details-renew_auto_trash=重新建立預設“全部清除”。
details-renew_keep_all=重新建立預設“保留所有”。
details-force_gui=強制 GUI 入口點的可見性。


[controls]
LRM-input-toggle-gui=Toggle 後勤請求管理器 GUI
LRM-input-close-gui=關閉後勤請求管理器 GUI

[controls-description]

[mod-setting-name]
LogisticRequestManager-allow_gui_without_research=在不檢查技術的情況下建立 GUI
LogisticRequestManager-create_preset-autotrash=建立預設以清除庫存
LogisticRequestManager-create_preset-keepall=無需請求即可建立包含每個專案的預設
LogisticRequestManager-default_to_user=使用字元作為 LRM GUI 的預設目標
LogisticRequestManager-allow_constant_combinator=允許像箱子一樣使用常量組合器
LogisticRequestManager-appended_requests_after_existing_ones=在末尾追加請求
LogisticRequestManager-always_append_blueprints=始終將藍圖項新增到請求中
LogisticRequestManager-blueprint_item_requests_unlimited=將藍圖的新專案請求的最大值設定為 ∞
LogisticRequestManager-enable-append=向請求新增預設
LogisticRequestManager-enable-round_up=將專案請求舍入到下一個完整堆疊
LogisticRequestManager-enable-undefined_max_as_infinit=使用 max=∞ 儲存胸部預設
LogisticRequestManager-modifier-append=將預設新增到請求的修飾符
LogisticRequestManager-modifier-round_up=修改器在應用預設時向上舍入到下一個堆疊
LogisticRequestManager-modifier-undefined_max_as_infinit=修改器以儲存來自 max=∞ 的箱子的新請求
LogisticRequestManager-display_slots_by_tick_ratio=GUI：每個 Tick 的預設槽更新
LogisticRequestManager-display_slots_warning=儲存大型預設時發出警告

[mod-setting-description]
LogisticRequestManager-allow_gui_without_research=如果另一個 Mod 刪除了技術“物流機器人”，可能有助於訪問 LRM。在啟用它之前先嚐試命令 [color=yellow]/lrm force_gui[/color]！
LogisticRequestManager-create_preset-autotrash=預設包含對所有現有專案的請求。對於所有本身不提供裝置網格的裝置，上限設定為零以將其從庫存中移除。\n[color=yellow]此設定僅對玩家建立或載入帶有舊版 LRM！[/color]
LogisticRequestManager-create_preset-keepall=預設包含對所有現有專案的請求。每個專案的下限設定為零，上限設定為 ∞，因此它們既不會被請求也不會從庫存中移除。\n[color=yellow]此設定僅對玩家建立或載入遊戲時有影響使用舊版本的 LRM！[/color]
LogisticRequestManager-default_to_user=如果沒有開啟支援後勤請求的實體，則使用該角色作為與後勤請求管理器 GUI 的所有互動的預設目標。
LogisticRequestManager-allow_constant_combinator=使用常量組合器來應用可由邏輯電路操作的請求。如果啟用此設定，它們也可以用作預設的來源。
LogisticRequestManager-appended_requests_after_existing_ones=如果為 true，則在將預設附加到現有請求時不會填補現有空白。
LogisticRequestManager-always_append_blueprints=無論下面的“將預設新增到請求”設定如何，藍圖請求的專案都會新增到現有請求中。 （預設：啟用）
LogisticRequestManager-blueprint_item_requests_unlimited=如果啟用，為藍圖生成的新專案請求將配置為 max=∞，否則為 max=min，如果最大值適用（對於玩家角色等）。 （預設：禁用）
LogisticRequestManager-enable-append=如果啟用，預設可以新增到現有請求而不是替換它們。 （預設：“帶修飾符”）
LogisticRequestManager-enable-round_up=如果啟用，專案請求將在應用時四捨五入到下一個完整堆疊。 （預設：“帶修飾符”）
LogisticRequestManager-enable-undefined_max_as_infinit=如果啟用，從箱子（或常量組合器）儲存預設時，請求的最大值將設定為 ∞。否則，它的最大值將設定為與配置的（最小值）值相同的值（預設值：“帶修飾符”）
LogisticRequestManager-modifier-append=如果上面選擇了“從不”或“總是”，則忽略。 （預設值：“SHIFT”）
LogisticRequestManager-modifier-round_up=如果上面選擇了“從不”或“總是”，則忽略。 （預設：“CTRL”）
LogisticRequestManager-modifier-undefined_max_as_infinit=如果上面選擇了“從不”或“總是”，則忽略。 （預設：“ALT”）
LogisticRequestManager-display_slots_by_tick_ratio=配置每次更新更新多少 GUI 插槽。可以幫助提高效能，預覽非常大的預設。 0：無限制（預設）
LogisticRequestManager-display_slots_warning=儲存超過 100 個專案的預設時，會列印指向設定的提示。

[string-mod-setting]
#<setting-name>-<dropdown-item-name>=<translated item>
LogisticRequestManager-enable-round_up-never=絕不
LogisticRequestManager-enable-round_up-always=總是
LogisticRequestManager-enable-round_up-on_modifier=帶修飾符
LogisticRequestManager-enable-round_up-not_on_modifier=沒有修飾符
LogisticRequestManager-enable-append-never=絕不
LogisticRequestManager-enable-append-always=總是
LogisticRequestManager-enable-append-on_modifier=帶修飾符
LogisticRequestManager-enable-append-not_on_modifier=沒有修飾符
LogisticRequestManager-enable-undefined_max_as_infinit-never=絕不
LogisticRequestManager-enable-undefined_max_as_infinit-always=總是
LogisticRequestManager-enable-undefined_max_as_infinit-on_modifier=帶修飾符
LogisticRequestManager-enable-undefined_max_as_infinit-not_on_modifier=沒有修飾符
LogisticRequestManager-modifier-append-CTRL=CTRL
LogisticRequestManager-modifier-append-CTRL+SHIFT=CTRL + SHIFT
LogisticRequestManager-modifier-append-CTRL+ALT=CTRL + ALT
LogisticRequestManager-modifier-append-SHIFT+ALT=SHIFT + ALT
LogisticRequestManager-modifier-append-CTRL+SHIFT+ALT=CTRL + SHIFT + ALT
LogisticRequestManager-modifier-round_up-CTRL=CTRL
LogisticRequestManager-modifier-round_up-CTRL+SHIFT=CTRL + SHIFT
LogisticRequestManager-modifier-round_up-CTRL+ALT=CTRL + ALT
LogisticRequestManager-modifier-round_up-SHIFT+ALT=SHIFT + ALT
LogisticRequestManager-modifier-round_up-CTRL+SHIFT+ALT=CTRL + SHIFT + ALT
LogisticRequestManager-modifier-undefined_max_as_infinit-CTRL=CTRL
LogisticRequestManager-modifier-undefined_max_as_infinit-CTRL+SHIFT=CTRL + SHIFT
LogisticRequestManager-modifier-undefined_max_as_infinit-CTRL+ALT=CTRL + ALT
LogisticRequestManager-modifier-undefined_max_as_infinit-SHIFT+ALT=SHIFT + ALT
LogisticRequestManager-modifier-undefined_max_as_infinit-CTRL+SHIFT+ALT=CTRL + SHIFT + ALT
