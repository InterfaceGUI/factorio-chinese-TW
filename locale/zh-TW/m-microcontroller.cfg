[entity-name]
microcontroller=微控制器
microcontroller-ram=記憶體模組

[entity-description]
microcontroller=使用 FAL（Factorio 組合語言）程式設計邏輯並像專業人士一樣處理訊號。
microcontroller-ram=微控制器可以讀取和寫入的模組。靠近微控制器放置。

[item-name]
microcontroller=微控制器

[virtual-signal-name]
signal-mc-halt=停止訊號
signal-mc-run=執行訊號
signal-mc-step=步進訊號
signal-mc-sleep=睡眠訊號
signal-mc-jump=跳躍訊號

[mod-description]
##m-microcontroller=program circuit network logic using FAL, a Factorio Assembly Language.\nAuthor: Luke Perkin. Modified by ZwerOxotnik and by contributors

[mod-name]
##m-microcontroller=MicroController

[mod-setting-name]
mc_update_tick_time=更新滴答時間

[mod-setting-description]
mc_update_tick_time=微控制器每第 N 個滴答執行一個動作

[technology-name]
microcontroller=微控制器

[microcontroller]
wiki=FAL 的緊湊 wiki
syntax=句法
example=例子
hover-text-hint=將滑鼠懸停在文字上以檢視工具提示
doc.overview=概述
doc.overview_description=Factorio 組合語言是自動化製造的未來。專為大型工廠設計。 Factorio 組合語言有多個操作碼，而 MicroController（Factorio MicroController Unit）可以儲存 32 條指令。微控制器有 4 個內部讀/寫暫存器和 4 個只讀暫存器。
doc.glossary=詞彙表
doc.glossary_description=
doc.basic_instructions_set=基本指令集
doc.basic_instructions_set_description=
doc.arithmetic_instructions=算術指令
doc.arithmetic_instructions_description=
doc.test_instructions=測試說明
doc.test_instructions_description=如果測試成功，測試指令將跳過下一條指令。
doc.blocking_instructions=阻塞指令
doc.blocking_instructions_description=阻塞指令將暫停程式直到操作完成
doc.interrupt_signals=中斷訊號
doc.interrupt_signals_description=有 5 種特殊訊號可用於中斷程式。\n當微控制器在其綠線或紅線輸入端接收到中斷訊號時，我將立即執行中斷。
doc.old-help-text=上一個幫助文字
doc.old-help-text_description=
doc.pointers=指標
doc.pointers_description=當指定記憶體地址作為指令的引數時，您還可以傳遞記憶體指標。指標是一個特殊地址，在執行時計算文字地址。\n\n通常，記憶體地址採用 memN 的形式。這指示微控制器訪問第一個暫存器。一個指標從 MEM@1 獲取。這指示微控制器讀取暫存器 1 的值，然後讀取暫存器 N 的值，其中 N 是暫存器 1 的值。
doc.example_programs=示例程式
doc.example_programs_description=
topics.registers=[color=yellow]0.1[/color] 暫存器
topics.registers_description=微控制器有 4 個內部讀寫暫存器：\nmem1 mem2 mem3 mem4\n\n它還有 4 個只讀暫存器：\nmem5 或 ipt：指令指標索引。\nmem6 或 cnr：紅線輸入上的訊號數。 \nmem7 或 cng：綠線輸入上的訊號數。\nmem8 或 clk：單調時鐘。
topics.mapped-memory=[color=yellow]0.2[/color] 對映記憶體
topics.mapped-memory_description=微控制器可以透過 RAM 模組進行擴充套件。微控制器有 4 個外部儲存器埠：\n北埠 01 對映到 MEM11-14。\n南埠 01 對映到 MEM21-42。\n北埠 02 對映到 MEM31-34。\n南埠 02 對映到 MEM41- 44.\n您還可以將外部微控制器連線到南北埠 01。
topics.signal_glossary=[color=yellow]1.1[/color] 訊號
topics.signal_glossary_description=一個型別和一個有符號整數值。
topics.type_glossary=[color=yellow]1.2[/color] 型別
topics.type_glossary_description=每個訊號都包含一個型別。該型別可以是指您的工廠消費或生產的物品，也可以是“虛擬”型別。
topics.value_glossary=[color=yellow]1.3[/color] 值
topics.value_glossary_description=訊號的整數部分。
topics.move_glossary=[color=yellow]1.4[/color] 移動
topics.move_glossary_description=將訊號從一個暫存器複製到另一個。
topics.set_glossary=[color=yellow]1.5[/color] 設定
topics.set_glossary_description=將訊號的值設定為另一個值。
topics.register_glossary=[color=yellow]1.6[/color] 註冊
topics.register_glossary_description=暫存器 可以儲存一個訊號的記憶體單元。
topics.clear_glossary=[color=yellow]1.7[/color] 透明
topics.clear_glossary_description=將暫存器重置為 NULL。
topics.null_glossary=[color=yellow]1.8[/color] NULL
topics.null_glossary_description=值為 0 的虛擬黑訊號。
topics.label_glossary=[color=yellow]1.9[/color] 標籤
topics.label_glossary_description=用於跳轉的文字識別符號。
topics.description_BIS=每個微控制器在第 N 個滴答聲中只能讀取一條指令。（可定製）
topics.description_BIS_description=60 滴答聲 ~= 1 秒
topics.comments_BIS=[color=yellow]2.1[/color] 評論
topics.comments_BIS_description=評論後的所有文字
topics.labels_BIS=[color=yellow]2.2[/color] 標籤
topics.labels_BIS_description=標籤用作跳轉指令的識別符號。\n標籤是一個冒號後跟文字。\n在跳轉指令中使用標籤時，還必須包含冒號。
topics.NOP_BIS=[color=yellow]2.3[/color] NOP
topics.NOP_BIS_description=NOP 代表無操作。它對內部暫存器的狀態沒有影響。\n微控制器仍然需要 N 個滴答來讀取 NOP 指令。
topics.MOV_BIS=[color=yellow]2.4[/color] MOV
topics.MOV_BIS_description=接收訊號<SRC>並將其寫給所有人<DST>暫存器。
topics.SET_BIS=[color=yellow]2.5[/color] 設定
topics.SET_BIS_description=取值為<SRC>並將其寫入<DST>
topics.SWP_BIS=[color=yellow]2.6[/color] SWP
topics.SWP_BIS_description=交換訊號<SRC>和<DST>.
topics.CLR_BIS=[color=yellow]2.7[/color] CLR
topics.CLR_BIS_description=將 NULL 寫入所有<DST>暫存器。
topics.FIG_BIS=[color=yellow]2.8[/color] 在綠色中查詢
topics.FIG_BIS_description=在訊號型別等於訊號型別的綠線輸入中查詢訊號<SRC>.\n如果找到訊號，則將其寫入 memN。
topics.FIR_BIS=[color=yellow]2.9[/color] 查詢紅色
topics.FIR_BIS_description=在紅線輸入中查詢訊號型別等於<SRC>.\n如果找到訊號，則將其寫入 memN。
topics.JMP_BIS=[color=yellow]2.10[/color] JMP
topics.JMP_BIS_description=將指令指標跳轉到<SRC>.\n如果<SRC>是文字整數，指令指標跳轉到該行。\n如果<SRC>是一個暫存器，指令指標跳轉到第 N 行，其中 N 是暫存器的值。\n如果<SRC>是一個標籤，指令指標跳轉到該標籤的第一個宣告。
topics.HLT_BIS=[color=yellow]2.11[/color] HLT
topics.HLT_BIS_description=暫停程式
topics.ADD_AI=[color=yellow]3.1[/color] 新增
topics.ADD_AI_description=將值新增到<SRC>價值在<DST>並將結果寫入 memN。
topics.SUB_AI=[color=yellow]3.2[/color] SUB
topics.SUB_AI_description=減去值<DST>從價值<SRC>並將結果寫入 memN。
topics.MUL_AI=[color=yellow]3.3[/color] MUL
topics.MUL_AI_description=乘以價值<SRC>由價值在<DST>並將結果寫入 memN。
topics.DIV_AI=[color=yellow]3.4[/color] DIV
topics.DIV_AI_description=將值除以<SRC>由價值在<DST>並將結果寫入 memN。
topics.MOD_AI=[color=yellow]3.5[/color] MOD
topics.MOD_AI_description=執行<SRC>模數<DST>並將結果寫入 memN。
topics.POW_AI=[color=yellow]3.6[/color] POW
topics.POW_AI_description=加註<SRC>的力量<DST>並將結果寫入 memN。\n[color=yellow]算術指令忽略訊號型別。[/color]
topics.DIG_AI=[color=yellow]3.7[/color] 挖
topics.DIG_AI_description=讀取位置的數字<SRC>從 memN 並將結果寫入 memN。
topics.DIS_AI=[color=yellow]3.8[/color] DIS
topics.DIS_AI_description=寫<DST>到位置的數字<SRC>在 memN 中。\n如果<DST>長度超過 1 位，它寫入第 1 位。
topics.BND_AI=[color=yellow]3.9[/color] BITWISE AND
topics.BND_AI_description=執行<SRC>和<DST>然後將結果寫入 memN。
topics.BOR_AI=[color=yellow]3.10[/color] BITWISE OR
topics.BOR_AI_description=執行<SRC>要麼<DST>然後將結果寫入 memN。
topics.BXR_AI=[color=yellow]3.11[/color] BITWISE XOR
topics.BXR_AI_description=執行<SRC>異或<DST>然後將結果寫入 memN。
topics.BND2_AI=[color=yellow]3.12[/color] BITWISE NOT
topics.BND2_AI_description=不執行<SRC>然後將結果寫入 memN。
topics.BLS_AI=[color=yellow]3.13[/color] BITWISE 左移
topics.BLS_AI_description=移入位<SRC>經過<DST>向左，然後將結果寫入 memN。
topics.BRS_AI=[color=yellow]3.14[/color] BITWISE RIGHT SHIFT
topics.BRS_AI_description=移入位<SRC>經過<DST>向右，然後將結果寫入 memN。
topics.BLR_AI=[color=yellow]3.15[/color] 向左旋轉
topics.BLR_AI_description=旋轉位<SRC>經過<DST>向左，然後將結果寫入 memN
topics.BRR_AI=[color=yellow]3.16[/color] BITWISE RIGHT ROTATE
topics.BRR_AI_description=旋轉位<SRC>經過<DST>向右，然後將結果寫入 memN。
topics.TGT_TI=[color=yellow]4.1[/color] 測試大於
topics.TGT_TI_description=測試是否<SRC>值大於<DST>價值。
topics.TLT_TI=[color=yellow]4.2[/color] 測試少於
topics.TLT_TI_description=測試是否<SRC>值小於<DST>價值。
topics.TEQ_TI=[color=yellow]4.3[/color] 測試等於
topics.TEQ_TI_description=測試是否<SRC>值等於<DST>價值
topics.TTE_TI=[color=yellow]4.4[/color] 測試型別相等
topics.TTE_TI_description=測試是否<SRC>型別等於<DST>型別。
topics.TTN_TI=[color=yellow]4.5[/color] 測試型別不相等
topics.TTN_TI_description=測試是否<SRC>型別不等於<DST>型別。
topics.SLP_BI=[color=yellow]5.1[/color] SLP
topics.SLP_BI_description=程式將休眠<SRC>蜱。
topics.BKR_BI=[color=yellow]5.2[/color] BKR
topics.BKR_BI_description=暫停程式，直到至少有<SRC>紅線輸入上的訊號。
topics.BKG_BI=[color=yellow]5.3[/color] BKG
topics.BKG_BI_description=暫停程式，直到至少有<SRC>綠線輸入上的訊號。
topics.SYN_BI=[color=yellow]5.4[/color] SYN
topics.SYN_BI_description=暫停程式，直到所有其他連線的微控制器呼叫 SYN。
topics.HLT_IS=[color=yellow]6.1[/color] HLT
topics.HLT_IS_description=暫停程式
topics.RUN_IS=[color=yellow]6.2[/color] 執行
topics.RUN_IS_description=執行程式
topics.STP_IS=[color=yellow]6.3[/color] STP
topics.STP_IS_description=單步執行程式（執行當前指令然後暫停）。
topics.SLP_IS=[color=yellow]6.4[/color] SLP
topics.SLP_IS_description=程式將休眠 N 個刻度，其中 N 是訊號值。
topics.JMP_IS=[color=yellow]6.5[/color] JMP
topics.JMP_IS_description=將程式指令指標跳轉到 N，其中 N 是訊號的值。
topics.MEM_pointer=[color=yellow]7.1[/color] MEM@N
topics.MEM_pointer_description=訪問暫存器 X，其中 X 是暫存器 N 的值。
topics.RED_pointer=[color=yellow]7.2[/color] RED@N
topics.RED_pointer_description=訪問紅線輸入 X，其中 X 是暫存器 N 的值。
topics.GREEN_pointer=[color=yellow]7.3[/color] GREEN@N
topics.GREEN_pointer_description=訪問綠線輸入 X，其中 X 是暫存器 N 的值。
topics.MULTIPLY_INPUT_EP=[color=yellow]8.1[/color] 乘法輸入
topics.MULTIPLY_INPUT_EP_description=該程式採用第一個紅線輸入，將其加倍並輸出結果。
topics.ACCUMULATE_INPUT_EP=[color=yellow]8.2[/color] 累積輸入
topics.ACCUMULATE_INPUT_EP_description=該程式獲取紅線輸入上的前 4 個訊號，並隨著時間的推移累積它們。\n它需要位於北埠 01 的 RAM 模組。
