[controls]
viirld-pause-key=暫停/繼續排程器

[entity-description]
viirld-dispatcher=附近的站點在鐵路物流中被啟用。\n將訊號與站點的內容連線到輸入埠。\n當列車停止時，包含交付資訊的訊號會發送到輸出埠。

[entity-name]
viirld-dispatcher=鐵路物流排程器
viirld-io=排程器的隱藏埠

[mod-description]
viirld=新增一個排程器（建築物）來基於供應和請求站點自動化鐵路物流。\n\n具有直觀介面。受到LTN的啟發，但採用了不同的方式。

[mod-name]
viirld=鐵路物流排程器2 (Rail Logistics Dispatcher)

[mod-setting-description]
viirld-correctScheduleAtProvider=當列車到達供應站時，交付可以根據列車前往途中供應和請求的變化進行調整。
viirld-countingInsertersContent=計算站點內容時，會考慮到訊號和列車的內容。\n這有時會導致載入或解除安裝期間內容跳動，因為部分貨物會暫時停留在機械臂中。\n此選項可啟用機械臂內容計算。
viirld-debug=啟用一些除錯訊息和指示器。
viirld-minEnergyUseTrainMJ=列車參與交付的最低充電能量。\n能量儲備低於指定值的列車將不會被用於交付，將停留在車庫中。\n單位為兆焦耳（MJ）。\n\n例如：100 MJ = 25 煤炭。
viirld-pauseNewDispatchers=如果新安裝的排程器有設定（從其影子複製或重新建立），則暫停。\n\n這可以防止向新複製的排程器建立交付。
viirld-set-train-group=當列車到達車庫時，會被分配到與車庫站點同名的組。\n\n在交付過程中，列車會離開組並在回到車庫時重新加入。
viirld-updateTicks=更新站點內容、設定、請求和供應的週期。\n\n較低的值表示更頻繁的更新，但對CPU負載較高。\n\n請注意，每個站點的更新頻率最多每60個遊戲刻。
viirld-use-hack-to-save-interrupts=Lua API不支援儲存或更改列車中斷——它們會在排程表更改時被刪除。\n\n在異星工廠新增此功能之前，可以使用一種變通方法（技巧）。\n\n某些MOD可能會干擾此技巧，因此可能不可靠。

[mod-setting-name]
viirld-correctScheduleAtProvider=調整交付
viirld-countingInsertersContent=考慮機械臂內容
viirld-debug=除錯
viirld-minEnergyUseTrainMJ=列車最低能量（MJ）
viirld-pauseNewDispatchers=暫停新排程器
viirld-set-train-group=車庫中設定列車組
viirld-updateTicks=更新間隔（刻）
viirld-use-hack-to-save-interrupts=儲存中斷（技巧）

[technology-description]
viirld-dispatcher=透過將供應站、請求站和列車結合為一個自動化網路來實現鐵路物流自動化。

[technology-name]
viirld-dispatcher=鐵路物流排程器

[viirld-gui]
ANY_FLUID_BY_SIGNALS=透過訊號指定液體：
ANY_ITEM_BY_SIGNALS=透過訊號指定貨物：
EL_ALLOW_ANY_FLUID_PROVIDE=[item=passive-provider-chest] 供應
EL_ALLOW_ANY_FLUID_PROVIDE-tt=車站將根據排程器輸入埠的訊號供應液體。\n訊號必須大於零（>0）。\n\n輸入埠必須連線到車站的儲罐。
EL_ALLOW_ANY_FLUID_REQUEST=[item=requester-chest] 請求
EL_ALLOW_ANY_FLUID_REQUEST-tt=車站將根據排程器輸入埠的訊號請求液體。\n訊號必須小於零（<0）才能請求。\n\n輸入埠必須連線到車站的儲罐。\n\n設定的最小值（適用於所有液體）將允許每次配送至少攜帶指定數量。
EL_ALLOW_ANY_ITEM_PROVIDE=[item=passive-provider-chest] 供應
EL_ALLOW_ANY_ITEM_PROVIDE-tt=車站將根據排程器輸入埠的訊號供應貨物。\n訊號必須大於零（>0）。\n\n輸入埠必須連線到車站的貨箱。
EL_ALLOW_ANY_ITEM_REQUEST=[item=requester-chest] 請求
EL_ALLOW_ANY_ITEM_REQUEST-tt=車站將根據排程器輸入埠的訊號請求貨物。\n訊號必須小於零（<0）才能請求。\n\n輸入埠必須連線到車站的貨箱。\n\n設定的最小值（適用於所有貨物）將允許每次配送至少攜帶指定數量。
EL_APPLY=應用
EL_CARGO_STAT_TABLE-H-COUNT=配送次數
EL_CARGO_STAT_TABLE-H-LASTTIME=最後時間
EL_CARGO_STAT_TABLE-H-RECV=接收
EL_CARGO_STAT_TABLE-H-SENT=傳送
EL_CARGO_STAT_TABLE-TITLE=統計資訊
EL_DELETE_DELIVERY-tt=刪除配送。\n\n讓排程器忘記這次配送，不會影響列車——列車仍會按計劃行駛。
EL_DELIVERIES_TABLE-H-FROM=來源
EL_DELIVERIES_TABLE-H-TIME=時間
EL_DELIVERIES_TABLE-H-TO=目標
EL_DELIVERIES_TABLE-TITLE=配送列表
EL_ERR_TABLE-H-ERROR=錯誤
EL_ERR_TABLE-H-TIME=時間
EL_IO_TABLE-H-BALANCE=餘額
EL_IO_TABLE-H-ON_STATION=在車站
EL_IO_TABLE-H-ON_WAY=運輸中
EL_IO_TABLE-TITLE=[color=__1__]請求−[/color] 和 [color=__2__]供應+[/color]
EL_ITEM_ALLOW_PROVIDE=[item=passive-provider-chest] 供應
EL_ITEM_ALLOW_PROVIDE-tt=車站將供應所選資源。\n\n供應量由排程器輸入埠接收到的訊號決定。\n必須連線到車站的貨箱和/或儲罐。
EL_ITEM_ALLOW_REQUEST=[item=requester-chest] 請求：
EL_ITEM_ALLOW_REQUEST-tt=車站將請求所選資源。\n\n請求量由指定的引數和排程器輸入埠的訊號決定。\n必須連線到車站的貨箱和/或儲罐。\n\n設定的最小值將確保每次配送至少攜帶指定數量。
EL_ITEM_BUTTON-ANY-tt=根據排程器輸入埠接收的訊號進行設定的按鈕。\n\n如果收到負數訊號（< 0）的貨物或液體，車站將請求該資源。\n如果是正數訊號（> 0），車站將供應。\n需要相應設定啟用。
EL_ITEM_BUTTON-tt=選擇一個物品或液體，然後設定請求或供應引數。\n\n根據設定，車站將在鐵路網路中請求或供應所選資源。
EL_ITEM_MEM_BUTTON=記憶：
EL_ITEM_MEM_BUTTON-tt=按住 Ctrl、Alt 或 Shift 左鍵點選可將物品設定儲存到單元格。\n僅左鍵點選可應用儲存的設定。\n右鍵點選清除單元格。
EL_ITEM_MIN=最小值：
EL_ITEM_MIN-tt=車站將請求所選資源。\n\n請求量由指定引數和排程器輸入埠的訊號決定。\n必須連線到車站的貨箱和/或儲罐。\n\n設定的最小值將確保每次配送至少攜帶指定數量。
EL_ITEM_REQUEST-tt=車站將請求選定的資源。\n\n請求量由指定的引數以及排程器輸入埠上的訊號決定。\n它必須連線到車站的箱子和/或儲罐。\n\n設定最低值可以確保每次交付不少於指定的數量。
EL_LEN=車廂數量:
EL_LEN-tt=車站的列車長度限制："從"–"到"（包括在內）。\n\n例如，如果指定"2"–"3"，那麼從該車站出發的列車僅有兩節或三節車廂（包括機車）。\n你可以省略一些值：" "–"3"表示一節、兩節或三節車廂。
EL_MIN_ANY_FLUID=最小值:
EL_MIN_ANY_FLUID-tt=車站將根據排程器輸入埠上的訊號請求液體。\n必須為負值（<0）才能發出請求。\n\n輸入埠必須連線到車站的儲罐。\n\n最低值設定（適用於所有液體）將允許你每次交付至少攜帶指定的數量。
EL_MIN_ANY_ITEM=最小值:
EL_MIN_ANY_ITEM-tt=車站將根據排程器輸入埠上的訊號請求貨物。\n必須為負值（<0）才能發出請求。\n\n輸入埠必須連線到車站的箱子。\n\n最低值設定（適用於所有貨物）將允許你每次交付至少攜帶指定的數量。
EL_MODE_DEPOT=[item=locomotive] 車庫
EL_MODE_DEPOT-tt=在車庫中，列車等待交付任務並進行加油。\n\n列車總是返回它離開的同名車庫，透過車站名稱找到。\n\n如果希望為不同型別的列車設定不同的車庫，請給它們命名不同。\n\n如果列車燃料不足或車廂中仍有貨物，它將停留並等待加油和清空。
EL_MODE_ENDPOINT=[item=passive-provider-chest] 提供 / [item=requester-chest] 請求
EL_MODE_ENDPOINT-tt=根據設定和物資訊號，車站將參與交付任務。\n\n對於每種型別的貨物（固體或液體），可以啟用“請求”或“提供”模式。\n\n也可以設定通用模式 [virtual-signal=signal-anything] ——請求（<0）和提供（>0）由排程器輸入埠上的訊號決定。\n\n當網路中出現兩個相似的請求和提供車站時，如果有合適的列車可用，就會建立交付。
EL_MODE_LIQUIDATION=[item=active-provider-chest] 清算
EL_MODE_LIQUIDATION-tt=類似於“[item=passive-provider-chest] 提供 / [item=requester-chest] 請求”模式，但有以下變化：\n- 此站點的請求被停用；\n- 提供的優先順序最高；\n- 當其他站點從此站點請求貨物時，忽略最低值。\n\n用於解除安裝準備銷燬的貨物。
EL_MODE_OFF=關閉
EL_MODE_OFF-tt=排程器將不控制此站點。
EL_NETWORK=網路:
EL_NETWORK-tt=你可以為該車站指定網路，例如：1，2，...\n\n每個網路是獨立的：交付在一個網路內組織。然而，列車是共享的。
EL_OUT_MODE_EXCHANGE=輸出需求交換
EL_OUT_MODE_EXCHANGE-tt=輸出埠將顯示需要裝載（>0）或解除安裝（<0）的貨物以傳送列車。\n\n例如，提供站點將顯示裝載的貨物為正號。請求站點將顯示為負號。\n\n請注意，選項“反轉輸出”可以改變符號：裝載—<0，解除安裝—>0。\n\n輸出埠還會發送以下訊號：\n[virtual-signal=signal-P] ——當有列車時，如果是提供站點，代表“提供者”。\n[virtual-signal=signal-R] ——當有列車時，如果是請求站點，代表“請求者”。\n[virtual-signal=signal-E] ——當有任何錯誤時。\n[virtual-signal=signal-L] ——列車長度，包括機車。\n[virtual-signal=signal-C] ——貨車數量。\n[virtual-signal=signal-F] ——液罐車數量。
EL_OUT_MODE_NEGATE=反轉輸出
EL_OUT_MODE_NEGATE-tt=改變輸出埠的符號。\n\n對於“輸出需求內容”模式，傳送所需列車內容時會帶有負號。\n對於“輸出需求交換”模式，符號將改變：裝載—<0，解除安裝—>0。
EL_OUT_MODE_TARGET_CONTENTS=輸出需求內容
EL_OUT_MODE_TARGET_CONTENTS-tt=輸出埠將顯示傳送列車所需的內容。\n\n例如，提供站點將顯示正在裝載的貨物。請求站點將顯示為空——列車中不應剩下任何東西。\n\n輸出埠還會發送以下訊號：\n[virtual-signal=signal-P] ——當有列車時，如果是提供站點，代表“提供者”。\n[virtual-signal=signal-R] ——當有列車時，如果是請求站點，代表“請求者”。\n[virtual-signal=signal-E] ——當有任何錯誤時。\n[virtual-signal=signal-L] ——列車長度，包括機車。\n[virtual-signal=signal-C] ——貨車數量。\n[virtual-signal=signal-F] ——液罐車數量。
EL_PAUSE=暫停
EL_PAUSE-paused=[virtual-signal=viirld-delivery-pause] 取消暫停
EL_PAUSE-tt=它將在此站點暫停交付任務的建立。\n\n在設定中可以啟用或停用新排程器的自動暫停。\n\n可以使用訊號[virtual-signal=viirld-delivery-pause]進行自動暫停。\n\n如果訊號設定了暫停，你不能透過按鈕取消暫停。
EL_ROLLBACK=回退
EL_STATION_TEMPLATE=站點名稱模板:
EL_STATION_TEMPLATE-tt=自動車站重新命名的模板。\n\n對於模式“[item=passive-provider-chest] 提供 / [item=requester-chest] 請求”或“[item=active-provider-chest] 清算”，欄位可以使用以下替換符：\n- %d – 表示一個數字，將被替換為任意數字以使站點名稱變得唯一；\n- %s – 表示任意字串，將被替換為“blabla%d”，以使站點名稱變得唯一；\n- %x – 將被替換為站點的x座標；\n- %y – 將被替換為站點的y座標；\n- %u – 將被替換為唯一的站點識別符號。\n\n對於“[item=locomotive] 車庫”不使用替換符。\n\n請注意，如果站點名稱已經與模板匹配，則不會進行重新命名，例如，\n如果站點已經被稱為“[item=iron-plate] Zheleznogorsk”（並且沒有其他具有此名稱的站點），那麼使用模板“[item=iron-plate] %s”時，不會重新命名為“[item=iron-plate] blabla1”。\n\n示例：\n- 模板“[item=iron-plate] %d” → “[item=iron-plate] 1”或“[item=iron-plate] 2”，...\n- 模板“[item=iron-plate] %s” → “[item=iron-plate] blabla1”或“[item=iron-plate] blabla2”，...\n- 模板“[item=iron-plate] %xx%y” → “[item=iron-plate] 45x76”\n- 模板“[item=iron-plate]” → “[item=iron-plate]1” - 沒有%d或%s，因此數字新增到右側。\n\n如果為空，排程器不會更新站點名稱。
EL_STAT_TRAINS=曾到過列車: __1__
FLAG_turnInserters=翻轉傳送臂
FLAG_turnInserters-tt=有時，在傳送列車時，傳送臂中可能會殘留物品。此選項將在傳送列車時臨時翻轉傳送臂以將物品放回箱子中。
FLAG_useEquals=嚴格比較
FLAG_useEquals-tt=預設情況下，日程使用非嚴格比較（>=）。此選項啟用嚴格比較（=）。這對於更精確的裝載可能有用。
FLAG_useSignals=訊號模式
FLAG_useSignals-tt=根據訊號（[virtual-signal=signal-green]）為該站點生成一個日程。不要忘記連線車站。
FLY-SELECT_ITEM_OR_FLUID=選擇物品或液體。
WINDOW_TITLE=__1__車站排程器
WINDOW_TITLE-ghost=車站排程器的幽靈
mem-any-item-fluid=基於訊號的液體：
mem-any-item-item=基於訊號的貨物：
mem-any-item-nothing=停用提供和請求
mem-any-item-provide=[item=passive-provider-chest] 啟用提供
mem-any-item-request=[item=requester-chest] 啟用請求，最低值 __1__
mem-item-nothing=停用提供和請求
mem-item-provide=[item=passive-provider-chest] 啟用提供
mem-item-request=[item=requester-chest] 啟用請求：__1__，最低值 __2__
mem-item-tt=按住Ctrl、Alt或Shift點選左鍵，將物品設定儲存到單元格。\n僅左鍵點選以應用已儲存的設定。\n右鍵點選清除單元格。



[viirld-units]
x-cargo-wagon=×[entity=__1__]
x-cargo-wagon-str=__1__節
x-cargo-wagon-tt=貨車 = __1__×[img=viirld_stack]
x-fluid-wagon=×[entity=__1__]
x-fluid-wagon-str=__1__節
x-fluid-wagon-tt=液罐車 = __1__
x-reverse-count-line== __1__ __2__
x-stack=×[img=viirld_stack]
x-stack-str=__1__s
x-stack-tt=堆疊數
x1=×1
x1-tt=確切數量

[viirld]
ERR--DIRTY=列車未清空
ERR--DIRTY-tt=列車中仍有貨物或液體。\n列車在清空前不會用於配送任務。
ERR--NO_CONNECTION=未連線 [item=green-wire][item=red-wire]
ERR--NO_CONNECTION-tt=排程器輸入埠未連線到站臺的箱子或儲罐 ([item=green-wire][item=red-wire])。\n未連線之前，排程器不會建立配送任務。
ERR--NO_FUEL=列車未加油
ERR--NO_FUEL-tt=列車燃料不足 (< __1__ MJ，設置於地圖引數中)。\n列車在補充燃料之前不會用於配送任務。
ERR-DELETED_DELIVERY=已移除配送任務 __1__，列車可能被卡住：[train-stop=__2__] → [train-stop=__3__]
ERR-NEED_CHECK=需要檢查
ERR-NEED_CHECK-tt=站臺此前在處理 [__1__] 請求時出現問題，但已建立配送任務。\n\n需要檢查 [__1__] 請求的問題是否完全解決。這需要一些時間。
ERR-NO_PROVIDE=無供應
ERR-NO_PROVIDE-tt=無法找到提供 [__1__] 的站臺。
ERR-NO_REQUEST=無請求
ERR-NO_TRAIN=無列車
ERR-NO_TRAIN-tt=找不到可用於配送 [__1__] 的合適空閒列車。\n\n列車必須符合供應站和請求站的長度設定，同時配備滿足最低請求需求的車廂。
ERR-PAUSED=已暫停
ERR-PAUSED-tt=該站臺不會建立配送任務。\n    \n您可以透過上方按鈕或傳送訊號 [virtual-signal=viirld-delivery-pause] 至排程器輸入埠暫停或恢復配送。\n\n如果排程器有設定（複製或從其幽靈中重建），新建的排程器會預設暫停。這可在設定中關閉。
ERR-TNQ-LIMIT=站臺限制
ERR-TNQ-LIMIT-tt=站臺上的列車數量已滿或超出限制（設置於站臺引數中）。
ERR-TNQ-QUEUED=已排隊
ERR-TNQ-QUEUED-tt=由於供應有限，請求站 [__1__] 正在排隊。\n\n佇列確保有限供應的更公平分配。\n\n當前佇列：__2__
ERR-WRONG_SETTINGS=排程器設定錯誤：__1__
ERR_MSG-TRAIN_ARRIVED_PROVIDER_TWICE=列車已多次到達供應站：[train-stop=__1__]
ERR_MSG-TRAIN_ARRIVED_REQUESTER_TWICE=列車已多次到達請求站：[train-stop=__1__]
ERR_MSG-TRAIN_ARRIVED_REQUESTER_WO_PROVIDER=列車到達請求站 [train-stop=__1__]，但未到達供應站。
ERR_MSG-UNEXPECTED_DEPOT=意外到達車庫：[train-stop=__1__]。
ERR_MSG-UNKNOWN_DELIVERY=站臺 [train-stop=__2__] 上發現未知配送任務 __1__。
RQ-line=\n__1__. __2__
RQ-line_me=\n__1__. __2__ — 當前站臺
RQ-no=無佇列
pause-by-signal=訊號 [virtual-signal=viirld-delivery-pause] 暫停
paused=已暫停
unpaused=已恢復

[virtual-signal-description]
viirld-delivery=鐵路物流排程器確定到達站臺的配送任務。\n此為技術訊號，請勿手動更改。
viirld-delivery-pause=鐵路物流排程器在輸入埠接收該訊號時暫停建立配送任務。

[virtual-signal-name]
viirld-delivery=配送任務 ID
viirld-delivery-pause=暫停配送任務

