[gui]
##title=Logistic Request Manager
save_as=另存为
empty=空的
import=进口
export=出口
import-title=导入代码
export-title=导出代码
import-preview-title=预览导入的预设
target_label=交互实体：
auto_trash=清除所有
keep_all=保留全部
protected_preset=protected - 不能被覆盖

[tooltip]
# prevent linebreaks with printable whitespace (ALT+NUM 2-5-5' '), if necessary
button=后勤请求管理器\n（按住“__1__”可将 GUI 置于其默认位置）
save_as_textfield=输入要用于新预设的名称。
save_as=将来自 __1__ 的当前物流请求保存为新预设。
blueprint-request=在此处放置一个蓝图以请求其在 __1__ 中的内容。
always_append_blueprints=在此处放置一个蓝图以将其内容添加到 __1__ 中的现有请求中。
save-preset=用来自 __2__ 的当前物流请求覆盖预设的“__1__”。
load-preset=在 __2__ 中加载预设“__1__”作为请求。
delete-preset=删除预设“__1__”。
import-preset=导入以前的 exportet 预设。
export-preset=将预设“__1__”导出为字符串。
imported-string=导入的字符串
missing-object=__1__ &quot;__2__&quot; 似乎消失了。你错过了一个模组吗？
invalid-type=“__2__”的信号类型“__1__”无效。
function-append=请求将被添加到现有请求中，而不是替换它们
function-undefined_max_as_infinit=新请求的最大值将设置为∞
function-round_up=请求的最小值将四舍五入到下一个完整的堆栈大小
function-subtract=__1__ 从现有请求中减去请求，而不是替换或添加它们。
function-subtract_max=请求的最大值将从现有请求的最大值中减去
on_modifier=如果在单击时按下了 __1__
if_not_modifier=如果单击时未按下 __1__
protected_preset=受保护的预设 - 不能被覆盖。

[common]
The-item=项目
The-fluid=流体
The-virtual=信号
CTRL=CTRL
SHIFT=转移
ALT=一切
CTRL+SHIFT=CTRL + SHIFT
CTRL+ALT=CTRL + ALT
SHIFT+ALT=SHIFT + ALT
CTRL+SHIFT+ALT=CTRL + SHIFT + ALT
R-CLICK=右键点击

[messages]
name-needed=您必须输入预设名称。
not-enough-slots-to-request=没有足够的插槽来请求这个 __1__。
not-enough-slots-to-append=没有足够的插槽将此 __1__ 附加到当前请求。
select-preset=您必须选择 __1__ 的预设。
protected-preset=受保护的预设。您必须为 __1__ 选择另一个预设。
save=保存
load=加载
delete=删除
append=附加
export=出口
open-entity-does-not-support-requests=“__1__”不支持后勤请求。
no_request_entity_selected=您需要打开支持物流请求的 __1__ 或您的库存到 __2__ 和 __3__。
no_request_entity_or_combinator_selected=您需要打开一个支持物流请求的 __1__、一个常量组合器或您的库存到 __2__ 一个 __3__。
blueprint=蓝图
preset=预设
source-entity=源实体
target-entity=目标实体
Error=错误
error-invalid-string=导入的字符串无效。
error-object-removed=__1__ “__2__”，在预设 __3__ 中列出，似乎已经消失了。你错过了一个模组吗？
error-unsupported-type=预设 __3__ 中列出的“__2__”的信号类型“__1__”无效。
error-library_blueprints=无法检查存储在库中的蓝图。
library_blueprints=无法从存储在库中的蓝图中提取切片。您必须手动添加这些。
new_feature-export_import=添加了导入/导出功能。
new_feature-constant_combinator=添加了与常量组合器的交互。
new_feature-modifiers=添加了与实体交互的修饰符。
new-gui=GUI 收到了重大更改。
new-setting=这可以通过 mod-settings 菜单进行配置。
new-settings=这些可以通过 mod-settings 菜单进行配置。
new-how_to=请查看 mod 门户以获取更新的操作方法。
auto_trash=所有未在下面列出的项目都将被要求最小为“0”，最大为“0”。
keep_all=所有未在下面列出的项目都将被请求最小为“0”，最大为“∞”。
large_preset_warning=保存的预设相对较大。检查设置以防止在选择预设时冻结。

[command]
help=可用于在删除预定义预设时恢复它们或强制执行 GUI。
usage=用法：
details=有关参数类型的详细信息
parameter=范围
with_parameters=使用以下参数之一：
parameter_invalid=参数无效。
parameter_missing=缺少参数。
details-help=提供有关参数的详细信息。
details-renew_empty=重新创建预设的“emty”。
details-renew_auto_trash=重新创建预设“全部清除”。
details-renew_keep_all=重新创建预设“保留所有”。
details-force_gui=强制 GUI 入口点的可见性。


[controls]
LRM-input-toggle-gui=Toggle 后勤请求管理器 GUI
LRM-input-close-gui=关闭后勤请求管理器 GUI

[controls-description]

[mod-setting-name]
LogisticRequestManager-allow_gui_without_research=在不检查技术的情况下创建 GUI
LogisticRequestManager-create_preset-autotrash=创建预设以清除库存
LogisticRequestManager-create_preset-keepall=无需请求即可创建包含每个项目的预设
LogisticRequestManager-default_to_user=使用字符作为 LRM GUI 的默认目标
LogisticRequestManager-allow_constant_combinator=允许像箱子一样使用常量组合器
LogisticRequestManager-appended_requests_after_existing_ones=在末尾追加请求
LogisticRequestManager-always_append_blueprints=始终将蓝图项添加到请求中
LogisticRequestManager-blueprint_item_requests_unlimited=将蓝图的新项目请求的最大值设置为 ∞
LogisticRequestManager-enable-append=向请求添加预设
LogisticRequestManager-enable-round_up=将项目请求舍入到下一个完整堆栈
LogisticRequestManager-enable-undefined_max_as_infinit=使用 max=∞ 保存胸部预设
LogisticRequestManager-modifier-append=将预设添加到请求的修饰符
LogisticRequestManager-modifier-round_up=修改器在应用预设时向上舍入到下一个堆栈
LogisticRequestManager-modifier-undefined_max_as_infinit=修改器以保存来自 max=∞ 的箱子的新请求
LogisticRequestManager-display_slots_by_tick_ratio=GUI：每个 Tick 的预设槽更新
LogisticRequestManager-display_slots_warning=保存大型预设时发出警告

[mod-setting-description]
LogisticRequestManager-allow_gui_without_research=如果另一个 Mod 删除了技术“物流机器人”，可能有助于访问 LRM。在启用它之前先尝试命令 [color=yellow]/lrm force_gui[/color]！
LogisticRequestManager-create_preset-autotrash=预设包含对所有现有项目的请求。对于所有本身不提供设备网格的设备，上限设置为零以将其从库存中移除。\n[color=yellow]此设置仅对玩家创建或加载带有旧版 LRM！[/color]
LogisticRequestManager-create_preset-keepall=预设包含对所有现有项目的请求。每个项目的下限设置为零，上限设置为 ∞，因此它们既不会被请求也不会从库存中移除。\n[color=yellow]此设置仅对玩家创建或加载游戏时有影响使用旧版本的 LRM！[/color]
LogisticRequestManager-default_to_user=如果没有打开支持后勤请求的实体，则使用该角色作为与后勤请求管理器 GUI 的所有交互的默认目标。
LogisticRequestManager-allow_constant_combinator=使用常量组合器来应用可由逻辑电路操作的请求。如果启用此设置，它们也可以用作预设的来源。
LogisticRequestManager-appended_requests_after_existing_ones=如果为 true，则在将预设附加到现有请求时不会填补现有空白。
LogisticRequestManager-always_append_blueprints=无论下面的“将预设添加到请求”设置如何，蓝图请求的项目都会添加到现有请求中。 （默认：启用）
LogisticRequestManager-blueprint_item_requests_unlimited=如果启用，为蓝图生成的新项目请求将配置为 max=∞，否则为 max=min，如果最大值适用（对于玩家角色等）。 （默认：禁用）
LogisticRequestManager-enable-append=如果启用，预设可以添加到现有请求而不是替换它们。 （默认：“带修饰符”）
LogisticRequestManager-enable-round_up=如果启用，项目请求将在应用时四舍五入到下一个完整堆栈。 （默认：“带修饰符”）
LogisticRequestManager-enable-undefined_max_as_infinit=如果启用，从箱子（或常量组合器）保存预设时，请求的最大值将设置为 ∞。否则，它的最大值将设置为与配置的（最小值）值相同的值（默认值：“带修饰符”）
LogisticRequestManager-modifier-append=如果上面选择了“从不”或“总是”，则忽略。 （默认值：“SHIFT”）
LogisticRequestManager-modifier-round_up=如果上面选择了“从不”或“总是”，则忽略。 （默认：“CTRL”）
LogisticRequestManager-modifier-undefined_max_as_infinit=如果上面选择了“从不”或“总是”，则忽略。 （默认：“ALT”）
LogisticRequestManager-display_slots_by_tick_ratio=配置每次更新更新多少 GUI 插槽。可以帮助提高性能，预览非常大的预设。 0：无限制（默认）
LogisticRequestManager-display_slots_warning=保存超过 100 个项目的预设时，会打印指向设置的提示。

[string-mod-setting]
#<setting-name>-<dropdown-item-name>=<translated item>
LogisticRequestManager-enable-round_up-never=绝不
LogisticRequestManager-enable-round_up-always=总是
LogisticRequestManager-enable-round_up-on_modifier=带修饰符
LogisticRequestManager-enable-round_up-not_on_modifier=没有修饰符
LogisticRequestManager-enable-append-never=绝不
LogisticRequestManager-enable-append-always=总是
LogisticRequestManager-enable-append-on_modifier=带修饰符
LogisticRequestManager-enable-append-not_on_modifier=没有修饰符
LogisticRequestManager-enable-undefined_max_as_infinit-never=绝不
LogisticRequestManager-enable-undefined_max_as_infinit-always=总是
LogisticRequestManager-enable-undefined_max_as_infinit-on_modifier=带修饰符
LogisticRequestManager-enable-undefined_max_as_infinit-not_on_modifier=没有修饰符
LogisticRequestManager-modifier-append-CTRL=CTRL
LogisticRequestManager-modifier-append-CTRL+SHIFT=CTRL + SHIFT
LogisticRequestManager-modifier-append-CTRL+ALT=CTRL + ALT
LogisticRequestManager-modifier-append-SHIFT+ALT=SHIFT + ALT
LogisticRequestManager-modifier-append-CTRL+SHIFT+ALT=CTRL + SHIFT + ALT
LogisticRequestManager-modifier-round_up-CTRL=CTRL
LogisticRequestManager-modifier-round_up-CTRL+SHIFT=CTRL + SHIFT
LogisticRequestManager-modifier-round_up-CTRL+ALT=CTRL + ALT
LogisticRequestManager-modifier-round_up-SHIFT+ALT=SHIFT + ALT
LogisticRequestManager-modifier-round_up-CTRL+SHIFT+ALT=CTRL + SHIFT + ALT
LogisticRequestManager-modifier-undefined_max_as_infinit-CTRL=CTRL
LogisticRequestManager-modifier-undefined_max_as_infinit-CTRL+SHIFT=CTRL + SHIFT
LogisticRequestManager-modifier-undefined_max_as_infinit-CTRL+ALT=CTRL + ALT
LogisticRequestManager-modifier-undefined_max_as_infinit-SHIFT+ALT=SHIFT + ALT
LogisticRequestManager-modifier-undefined_max_as_infinit-CTRL+SHIFT+ALT=CTRL + SHIFT + ALT
